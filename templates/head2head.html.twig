{%  include 'base.html.twig' %}

{% block body %}
    <div class="container" id="wrestlers" data-wrestlers="{{ wrestlers }}">
        {% verbatim %}
        <div id="app">
            <div class="row">
                <div class="col-sm-6 mb-3 mb-sm-0">
                    <wrestler :selected="selected"></wrestler>
                </div>
            </div>
            <div class="row">
                <head2head v-for="wrestler in wrestlers"
                    @selected="onHead2HeadSelected"
                    :id="wrestler.id"
                    :shikona-en="wrestler.shikonaEn"
                    :sumo-db-id="wrestler.sumoDbId"
                    :heya="wrestler.heya"
                    :current-rank="wrestler.currentRank"
                    :wins="wrestler.wins"
                    :losses="wrestler.losses"
                    :winning-percentage="wrestler.winningPercentage"
                    ></head2head>
            </div>
        </div>
        {% endverbatim %}
    </div>
{%  endblock %}

{% block javascripts %}
    <script type="module">
        import { createApp } from 'vue'
        import wrestler from "{{ asset('../assets/wrestler.js') }}"
        import head2head from "{{ asset('../assets/head2head.js') }}"

        const app = createApp({
            data() {
                return {
                    wrestlers: [],
                    selected: ''
                }
            },
            mounted() {
                this.wrestlers = JSON.parse(document.getElementById('wrestlers').dataset.wrestlers);
                this.selected = this.wrestlers[0]
            },
            methods: {
                async onHead2HeadSelected(id) {
                    // Set wins and losses on wrestlers according to ids returned from API
                    const response = await fetch('/head2head/' + id)
                    const json = await response.json()
                    console.log(json)
                    const head2heads = JSON.parse(json)

                    this.wrestlers.forEach((wrestler, index) => {
                        const relevantMatchup = head2heads.matchups.filter(
                            (matchup) => matchup.opponentId === wrestler.id
                        )[0]

                        this.wrestlers[index].wins = relevantMatchup.rikishiWins
                        this.wrestlers[index].losses = relevantMatchup.opponentWins
                        this.wrestlers[index].winningPercentage = relevantMatchup.winningPercentage
                    });

                    // Sort array according to wins and losses
                    function compareHead2Heads(head2headA, head2headB) {
                        if (head2headA.winningPercentage < head2headB.winningPercentage) {
                            return 1;
                        }
                        if (head2headA.winningPercentage > head2headB.winningPercentage) {
                            return -1;
                        }

                        return 0;
                    }

                    this.wrestlers.sort(compareHead2Heads)

                    // Update the selected wrestler
                    this.selected = this.wrestlers.filter((wrestler) => wrestler.id === id)[0]
                }
            }
        })
        app.component('wrestler', wrestler)
        app.component('head2head', head2head)
        app.mount('#app')
    </script>
{% endblock %}
